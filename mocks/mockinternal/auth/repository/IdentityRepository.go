// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	aggregate "ddd-sample/internal/auth/aggregate"
	coreaggregate "ddd-sample/internal/core/aggregate"

	mock "github.com/stretchr/testify/mock"

	valueobject "ddd-sample/internal/auth/valueobject"
)

// IdentityRepository is an autogenerated mock type for the IdentityRepository type
type IdentityRepository struct {
	mock.Mock
}

type IdentityRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityRepository) EXPECT() *IdentityRepository_Expecter {
	return &IdentityRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: username
func (_m *IdentityRepository) Find(username string) (*aggregate.Identity, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *aggregate.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*aggregate.Identity, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *aggregate.Identity); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type IdentityRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - username string
func (_e *IdentityRepository_Expecter) Find(username interface{}) *IdentityRepository_Find_Call {
	return &IdentityRepository_Find_Call{Call: _e.mock.On("Find", username)}
}

func (_c *IdentityRepository_Find_Call) Run(run func(username string)) *IdentityRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IdentityRepository_Find_Call) Return(_a0 *aggregate.Identity, _a1 error) *IdentityRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityRepository_Find_Call) RunAndReturn(run func(string) (*aggregate.Identity, error)) *IdentityRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// PubEvent provides a mock function with given fields: _a0
func (_m *IdentityRepository) PubEvent(_a0 coreaggregate.CoreAggregate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PubEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(coreaggregate.CoreAggregate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IdentityRepository_PubEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubEvent'
type IdentityRepository_PubEvent_Call struct {
	*mock.Call
}

// PubEvent is a helper method to define mock.On call
//   - _a0 coreaggregate.CoreAggregate
func (_e *IdentityRepository_Expecter) PubEvent(_a0 interface{}) *IdentityRepository_PubEvent_Call {
	return &IdentityRepository_PubEvent_Call{Call: _e.mock.On("PubEvent", _a0)}
}

func (_c *IdentityRepository_PubEvent_Call) Run(run func(_a0 coreaggregate.CoreAggregate)) *IdentityRepository_PubEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(coreaggregate.CoreAggregate))
	})
	return _c
}

func (_c *IdentityRepository_PubEvent_Call) Return(_a0 error) *IdentityRepository_PubEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityRepository_PubEvent_Call) RunAndReturn(run func(coreaggregate.CoreAggregate) error) *IdentityRepository_PubEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLoginFailedRecord provides a mock function with given fields: identity
func (_m *IdentityRepository) SaveLoginFailedRecord(identity *aggregate.Identity) error {
	ret := _m.Called(identity)

	if len(ret) == 0 {
		panic("no return value specified for SaveLoginFailedRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregate.Identity) error); ok {
		r0 = rf(identity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IdentityRepository_SaveLoginFailedRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLoginFailedRecord'
type IdentityRepository_SaveLoginFailedRecord_Call struct {
	*mock.Call
}

// SaveLoginFailedRecord is a helper method to define mock.On call
//   - identity *aggregate.Identity
func (_e *IdentityRepository_Expecter) SaveLoginFailedRecord(identity interface{}) *IdentityRepository_SaveLoginFailedRecord_Call {
	return &IdentityRepository_SaveLoginFailedRecord_Call{Call: _e.mock.On("SaveLoginFailedRecord", identity)}
}

func (_c *IdentityRepository_SaveLoginFailedRecord_Call) Run(run func(identity *aggregate.Identity)) *IdentityRepository_SaveLoginFailedRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregate.Identity))
	})
	return _c
}

func (_c *IdentityRepository_SaveLoginFailedRecord_Call) Return(_a0 error) *IdentityRepository_SaveLoginFailedRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityRepository_SaveLoginFailedRecord_Call) RunAndReturn(run func(*aggregate.Identity) error) *IdentityRepository_SaveLoginFailedRecord_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLoginRecord provides a mock function with given fields: identity, token
func (_m *IdentityRepository) SaveLoginRecord(identity *aggregate.Identity, token valueobject.Token) error {
	ret := _m.Called(identity, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveLoginRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregate.Identity, valueobject.Token) error); ok {
		r0 = rf(identity, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IdentityRepository_SaveLoginRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLoginRecord'
type IdentityRepository_SaveLoginRecord_Call struct {
	*mock.Call
}

// SaveLoginRecord is a helper method to define mock.On call
//   - identity *aggregate.Identity
//   - token valueobject.Token
func (_e *IdentityRepository_Expecter) SaveLoginRecord(identity interface{}, token interface{}) *IdentityRepository_SaveLoginRecord_Call {
	return &IdentityRepository_SaveLoginRecord_Call{Call: _e.mock.On("SaveLoginRecord", identity, token)}
}

func (_c *IdentityRepository_SaveLoginRecord_Call) Run(run func(identity *aggregate.Identity, token valueobject.Token)) *IdentityRepository_SaveLoginRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregate.Identity), args[1].(valueobject.Token))
	})
	return _c
}

func (_c *IdentityRepository_SaveLoginRecord_Call) Return(_a0 error) *IdentityRepository_SaveLoginRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityRepository_SaveLoginRecord_Call) RunAndReturn(run func(*aggregate.Identity, valueobject.Token) error) *IdentityRepository_SaveLoginRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewIdentityRepository creates a new instance of IdentityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdentityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdentityRepository {
	mock := &IdentityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
