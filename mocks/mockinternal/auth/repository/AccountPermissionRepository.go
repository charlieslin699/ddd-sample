// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	aggregate "ddd-sample/internal/auth/aggregate"
	coreaggregate "ddd-sample/internal/core/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// AccountPermissionRepository is an autogenerated mock type for the AccountPermissionRepository type
type AccountPermissionRepository struct {
	mock.Mock
}

type AccountPermissionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountPermissionRepository) EXPECT() *AccountPermissionRepository_Expecter {
	return &AccountPermissionRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: accountUID
func (_m *AccountPermissionRepository) Find(accountUID string) (*aggregate.AccountPermission, error) {
	ret := _m.Called(accountUID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *aggregate.AccountPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*aggregate.AccountPermission, error)); ok {
		return rf(accountUID)
	}
	if rf, ok := ret.Get(0).(func(string) *aggregate.AccountPermission); ok {
		r0 = rf(accountUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.AccountPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountPermissionRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AccountPermissionRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - accountUID string
func (_e *AccountPermissionRepository_Expecter) Find(accountUID interface{}) *AccountPermissionRepository_Find_Call {
	return &AccountPermissionRepository_Find_Call{Call: _e.mock.On("Find", accountUID)}
}

func (_c *AccountPermissionRepository_Find_Call) Run(run func(accountUID string)) *AccountPermissionRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountPermissionRepository_Find_Call) Return(_a0 *aggregate.AccountPermission, _a1 error) *AccountPermissionRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountPermissionRepository_Find_Call) RunAndReturn(run func(string) (*aggregate.AccountPermission, error)) *AccountPermissionRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// PubEvent provides a mock function with given fields: _a0
func (_m *AccountPermissionRepository) PubEvent(_a0 coreaggregate.CoreAggregate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PubEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(coreaggregate.CoreAggregate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountPermissionRepository_PubEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubEvent'
type AccountPermissionRepository_PubEvent_Call struct {
	*mock.Call
}

// PubEvent is a helper method to define mock.On call
//   - _a0 coreaggregate.CoreAggregate
func (_e *AccountPermissionRepository_Expecter) PubEvent(_a0 interface{}) *AccountPermissionRepository_PubEvent_Call {
	return &AccountPermissionRepository_PubEvent_Call{Call: _e.mock.On("PubEvent", _a0)}
}

func (_c *AccountPermissionRepository_PubEvent_Call) Run(run func(_a0 coreaggregate.CoreAggregate)) *AccountPermissionRepository_PubEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(coreaggregate.CoreAggregate))
	})
	return _c
}

func (_c *AccountPermissionRepository_PubEvent_Call) Return(_a0 error) *AccountPermissionRepository_PubEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountPermissionRepository_PubEvent_Call) RunAndReturn(run func(coreaggregate.CoreAggregate) error) *AccountPermissionRepository_PubEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *AccountPermissionRepository) Update(_a0 *aggregate.AccountPermission) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregate.AccountPermission) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountPermissionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AccountPermissionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *aggregate.AccountPermission
func (_e *AccountPermissionRepository_Expecter) Update(_a0 interface{}) *AccountPermissionRepository_Update_Call {
	return &AccountPermissionRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *AccountPermissionRepository_Update_Call) Run(run func(_a0 *aggregate.AccountPermission)) *AccountPermissionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregate.AccountPermission))
	})
	return _c
}

func (_c *AccountPermissionRepository_Update_Call) Return(_a0 error) *AccountPermissionRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountPermissionRepository_Update_Call) RunAndReturn(run func(*aggregate.AccountPermission) error) *AccountPermissionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountPermissionRepository creates a new instance of AccountPermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountPermissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountPermissionRepository {
	mock := &AccountPermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
