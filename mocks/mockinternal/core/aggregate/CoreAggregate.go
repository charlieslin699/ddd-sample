// Code generated by mockery v2.42.1. DO NOT EDIT.

package aggregate

import (
	event "ddd-sample/internal/core/event"

	mock "github.com/stretchr/testify/mock"
)

// CoreAggregate is an autogenerated mock type for the CoreAggregate type
type CoreAggregate struct {
	mock.Mock
}

type CoreAggregate_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreAggregate) EXPECT() *CoreAggregate_Expecter {
	return &CoreAggregate_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: e
func (_m *CoreAggregate) AddEvent(e event.Event) {
	_m.Called(e)
}

// CoreAggregate_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type CoreAggregate_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - e event.Event
func (_e *CoreAggregate_Expecter) AddEvent(e interface{}) *CoreAggregate_AddEvent_Call {
	return &CoreAggregate_AddEvent_Call{Call: _e.mock.On("AddEvent", e)}
}

func (_c *CoreAggregate_AddEvent_Call) Run(run func(e event.Event)) *CoreAggregate_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.Event))
	})
	return _c
}

func (_c *CoreAggregate_AddEvent_Call) Return() *CoreAggregate_AddEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *CoreAggregate_AddEvent_Call) RunAndReturn(run func(event.Event)) *CoreAggregate_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// PopEvents provides a mock function with given fields:
func (_m *CoreAggregate) PopEvents() []event.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopEvents")
	}

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func() []event.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

// CoreAggregate_PopEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopEvents'
type CoreAggregate_PopEvents_Call struct {
	*mock.Call
}

// PopEvents is a helper method to define mock.On call
func (_e *CoreAggregate_Expecter) PopEvents() *CoreAggregate_PopEvents_Call {
	return &CoreAggregate_PopEvents_Call{Call: _e.mock.On("PopEvents")}
}

func (_c *CoreAggregate_PopEvents_Call) Run(run func()) *CoreAggregate_PopEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreAggregate_PopEvents_Call) Return(_a0 []event.Event) *CoreAggregate_PopEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAggregate_PopEvents_Call) RunAndReturn(run func() []event.Event) *CoreAggregate_PopEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreAggregate creates a new instance of CoreAggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreAggregate(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreAggregate {
	mock := &CoreAggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
