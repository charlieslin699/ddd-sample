// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	aggregate "ddd-sample/internal/core/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// CoreRepository is an autogenerated mock type for the CoreRepository type
type CoreRepository struct {
	mock.Mock
}

type CoreRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreRepository) EXPECT() *CoreRepository_Expecter {
	return &CoreRepository_Expecter{mock: &_m.Mock}
}

// PubEvent provides a mock function with given fields: _a0
func (_m *CoreRepository) PubEvent(_a0 aggregate.CoreAggregate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PubEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(aggregate.CoreAggregate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreRepository_PubEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubEvent'
type CoreRepository_PubEvent_Call struct {
	*mock.Call
}

// PubEvent is a helper method to define mock.On call
//   - _a0 aggregate.CoreAggregate
func (_e *CoreRepository_Expecter) PubEvent(_a0 interface{}) *CoreRepository_PubEvent_Call {
	return &CoreRepository_PubEvent_Call{Call: _e.mock.On("PubEvent", _a0)}
}

func (_c *CoreRepository_PubEvent_Call) Run(run func(_a0 aggregate.CoreAggregate)) *CoreRepository_PubEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(aggregate.CoreAggregate))
	})
	return _c
}

func (_c *CoreRepository_PubEvent_Call) Return(_a0 error) *CoreRepository_PubEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreRepository_PubEvent_Call) RunAndReturn(run func(aggregate.CoreAggregate) error) *CoreRepository_PubEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreRepository creates a new instance of CoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreRepository {
	mock := &CoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
