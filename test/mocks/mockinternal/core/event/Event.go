// Code generated by mockery v2.42.1. DO NOT EDIT.

package event

import (
	errorcode "ddd-sample/pkg/errorcode"

	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with given fields:
func (_m *Event) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Event_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Event_Expecter) GetName() *Event_GetName_Call {
	return &Event_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Event_GetName_Call) Run(run func()) *Event_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetName_Call) Return(_a0 string) *Event_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetName_Call) RunAndReturn(run func() string) *Event_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToJSON provides a mock function with given fields:
func (_m *Event) ParseToJSON() (string, errorcode.ErrorCode) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseToJSON")
	}

	var r0 string
	var r1 errorcode.ErrorCode
	if rf, ok := ret.Get(0).(func() (string, errorcode.ErrorCode)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() errorcode.ErrorCode); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errorcode.ErrorCode)
		}
	}

	return r0, r1
}

// Event_ParseToJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToJSON'
type Event_ParseToJSON_Call struct {
	*mock.Call
}

// ParseToJSON is a helper method to define mock.On call
func (_e *Event_Expecter) ParseToJSON() *Event_ParseToJSON_Call {
	return &Event_ParseToJSON_Call{Call: _e.mock.On("ParseToJSON")}
}

func (_c *Event_ParseToJSON_Call) Run(run func()) *Event_ParseToJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_ParseToJSON_Call) Return(_a0 string, _a1 errorcode.ErrorCode) *Event_ParseToJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_ParseToJSON_Call) RunAndReturn(run func() (string, errorcode.ErrorCode)) *Event_ParseToJSON_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
