// Code generated by mockery v2.42.1. DO NOT EDIT.

package env

import (
	env "ddd-sample/pkg/env"

	mock "github.com/stretchr/testify/mock"
)

// Env is an autogenerated mock type for the Env type
type Env struct {
	mock.Mock
}

type Env_Expecter struct {
	mock *mock.Mock
}

func (_m *Env) EXPECT() *Env_Expecter {
	return &Env_Expecter{mock: &_m.Mock}
}

// GetValue provides a mock function with given fields: e
func (_m *Env) GetValue(e env.EnvKey) string {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(env.EnvKey) string); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Env_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type Env_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - e env.EnvKey
func (_e *Env_Expecter) GetValue(e interface{}) *Env_GetValue_Call {
	return &Env_GetValue_Call{Call: _e.mock.On("GetValue", e)}
}

func (_c *Env_GetValue_Call) Run(run func(e env.EnvKey)) *Env_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(env.EnvKey))
	})
	return _c
}

func (_c *Env_GetValue_Call) Return(_a0 string) *Env_GetValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Env_GetValue_Call) RunAndReturn(run func(env.EnvKey) string) *Env_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// GetValueByKey provides a mock function with given fields: key
func (_m *Env) GetValueByKey(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetValueByKey")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Env_GetValueByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValueByKey'
type Env_GetValueByKey_Call struct {
	*mock.Call
}

// GetValueByKey is a helper method to define mock.On call
//   - key string
func (_e *Env_Expecter) GetValueByKey(key interface{}) *Env_GetValueByKey_Call {
	return &Env_GetValueByKey_Call{Call: _e.mock.On("GetValueByKey", key)}
}

func (_c *Env_GetValueByKey_Call) Run(run func(key string)) *Env_GetValueByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Env_GetValueByKey_Call) Return(value string, isKeyExist bool) *Env_GetValueByKey_Call {
	_c.Call.Return(value, isKeyExist)
	return _c
}

func (_c *Env_GetValueByKey_Call) RunAndReturn(run func(string) (string, bool)) *Env_GetValueByKey_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetValueByKey provides a mock function with given fields: key
func (_m *Env) MustGetValueByKey(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for MustGetValueByKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Env_MustGetValueByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetValueByKey'
type Env_MustGetValueByKey_Call struct {
	*mock.Call
}

// MustGetValueByKey is a helper method to define mock.On call
//   - key string
func (_e *Env_Expecter) MustGetValueByKey(key interface{}) *Env_MustGetValueByKey_Call {
	return &Env_MustGetValueByKey_Call{Call: _e.mock.On("MustGetValueByKey", key)}
}

func (_c *Env_MustGetValueByKey_Call) Run(run func(key string)) *Env_MustGetValueByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Env_MustGetValueByKey_Call) Return(_a0 string) *Env_MustGetValueByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Env_MustGetValueByKey_Call) RunAndReturn(run func(string) string) *Env_MustGetValueByKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnv creates a new instance of Env. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnv(t interface {
	mock.TestingT
	Cleanup(func())
}) *Env {
	mock := &Env{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
