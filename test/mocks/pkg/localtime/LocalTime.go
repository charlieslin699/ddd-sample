// Code generated by mockery v2.42.1. DO NOT EDIT.

package localtime

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// LocalTime is an autogenerated mock type for the LocalTime type
type LocalTime struct {
	mock.Mock
}

type LocalTime_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalTime) EXPECT() *LocalTime_Expecter {
	return &LocalTime_Expecter{mock: &_m.Mock}
}

// Location provides a mock function with given fields:
func (_m *LocalTime) Location() time.Location {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Location")
	}

	var r0 time.Location
	if rf, ok := ret.Get(0).(func() time.Location); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Location)
	}

	return r0
}

// LocalTime_Location_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Location'
type LocalTime_Location_Call struct {
	*mock.Call
}

// Location is a helper method to define mock.On call
func (_e *LocalTime_Expecter) Location() *LocalTime_Location_Call {
	return &LocalTime_Location_Call{Call: _e.mock.On("Location")}
}

func (_c *LocalTime_Location_Call) Run(run func()) *LocalTime_Location_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalTime_Location_Call) Return(_a0 time.Location) *LocalTime_Location_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalTime_Location_Call) RunAndReturn(run func() time.Location) *LocalTime_Location_Call {
	_c.Call.Return(run)
	return _c
}

// NowTime provides a mock function with given fields:
func (_m *LocalTime) NowTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NowTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// LocalTime_NowTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NowTime'
type LocalTime_NowTime_Call struct {
	*mock.Call
}

// NowTime is a helper method to define mock.On call
func (_e *LocalTime_Expecter) NowTime() *LocalTime_NowTime_Call {
	return &LocalTime_NowTime_Call{Call: _e.mock.On("NowTime")}
}

func (_c *LocalTime_NowTime_Call) Run(run func()) *LocalTime_NowTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalTime_NowTime_Call) Return(_a0 time.Time) *LocalTime_NowTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalTime_NowTime_Call) RunAndReturn(run func() time.Time) *LocalTime_NowTime_Call {
	_c.Call.Return(run)
	return _c
}

// NowTimeString provides a mock function with given fields:
func (_m *LocalTime) NowTimeString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NowTimeString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LocalTime_NowTimeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NowTimeString'
type LocalTime_NowTimeString_Call struct {
	*mock.Call
}

// NowTimeString is a helper method to define mock.On call
func (_e *LocalTime_Expecter) NowTimeString() *LocalTime_NowTimeString_Call {
	return &LocalTime_NowTimeString_Call{Call: _e.mock.On("NowTimeString")}
}

func (_c *LocalTime_NowTimeString_Call) Run(run func()) *LocalTime_NowTimeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalTime_NowTimeString_Call) Return(_a0 string) *LocalTime_NowTimeString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalTime_NowTimeString_Call) RunAndReturn(run func() string) *LocalTime_NowTimeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocalTime creates a new instance of LocalTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalTime {
	mock := &LocalTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
